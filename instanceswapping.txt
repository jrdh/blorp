instanceA			instanceB			instanceC					nodejs

ws1-message1			ws3-message1			ws4-message1
ws2-message1			ws3-message2
ws1-message2
ws1-message3
ws2-message2





strategy:

1. stop reading messages from instance queue
2. deal with all messages in local queues
3. inform nodejs that we are going to shutdown and then shutdown
~ in nodejs ~
4. reassign all messages to new instance queues (should block any new messages being added to the instance queue that just went down)




OR



don't bother with that and rearchitect the system so that each websocket has it's own queue of in messages.
Then create a lua script that:
1. takes a prefix as an argument
2. uses that prefix to retrieve all the keys under that prefix (i.e. all the websocket queues)
3. blpop on all of those queues in a random order
4. lock the queue we get a blpop from and return the message

then once processing is complete we unlock that queue and call the lua script again

Seems like this would be bad with a large number of websockets...




OR

1. Node.js receives connect, creates a queue for that socket if necessary and adds the message to it
2. Node.js then picks an instance and informs it of the existance of that queue
3. The instance starts blpop on that queue and works through any messages

then, either:

4. Node.js receives a disconnect and adds it to the queue
5. The instance receives the disconnect and stops listening

or

4. The instance disconnects, sending a message to node.js to inform it of its departure
5. Node.js sends a new connect message to a different instance and that then starts listening to the queue



Problems:
1. What happens if an instance disconnects unexpectantly
2. How do you know when an instance has fully stopped working a queue

Possible solution to both of these is a heartbeat? Instances keep node.js informed of their existance and if they disappear then it switches the queues off them.
Maybe use another set for heartbeats? Use a set of instance IDs and the 'heartbeat' is that each instance makes sure it's in that set every x seconds.
Then every x seconds node.js will check that set against the instance set and remove the diff? ME NO KNOW.


blorp:<namespace>:clients:<websocket>           - queue of messages from the clients (node -> instance)
blorp:<namespace>:out                           - queue of messages to be sent to the clients (instance -> node)
blorp:<namespace>:instances                     - set of connected instances (updated with heartbeats from the instances, trimmed by node)
blorp:<namespace>:control:<instance>            - queue of messages for the instance from node (such as connections)
