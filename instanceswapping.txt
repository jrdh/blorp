instanceA			instanceB			instanceC					nodejs

ws1-message1			ws3-message1			ws4-message1
ws2-message1			ws3-message2
ws1-message2
ws1-message3
ws2-message2





strategy:

1. stop reading messages from instance queue
2. deal with all messages in local queues
3. inform nodejs that we are going to shutdown and then shutdown
~ in nodejs ~
4. reassign all messages to new instance queues (should block any new messages being added to the instance queue that just went down)




OR



don't bother with that and rearchitect the system so that each websocket has it's own queue of in messages.
Then create a lua script that:
1. takes a prefix as an argument
2. uses that prefix to retrieve all the keys under that prefix (i.e. all the websocket queues)
3. blpop on all of those queues in a random order
4. lock the queue we get a blpop from and return the message

then once processing is complete we unlock that queue and call the lua script again

Seems like this would be bad with a large number of websockets...